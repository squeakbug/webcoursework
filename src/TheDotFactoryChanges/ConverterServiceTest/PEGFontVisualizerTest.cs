using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using NUnit.Allure.Core;
using NUnit.Framework;

using DataAccessInterface;
using Service;

namespace ConverterServiceTest
{
    public class WinFormsTextRendererAdapter : ITextRenderer
    {
        public Size MeasureText(string text, System.Drawing.Font font)
        {
            SizeF result;
            using (var image = new Bitmap(1, 1))
            {
                using (var g = Graphics.FromImage(image))
                {
                    result = g.MeasureString(text, font);
                }
            }

            return result.ToSize();
        }
    }

    [AllureNUnit]
    public  class PEGFontVisualizerTest
    {
        [Test]
        public void GetDumpTest()
        {
            var font = new System.Drawing.Font("Verdana", 10);
            var cfg = new Configuration();
            cfg.paddingRemovalHorizontal = PaddingRemoval.Tighest;
            cfg.paddingRemovalVertical = PaddingRemoval.Tighest;
            var sut = new PEGFontVisualizer(cfg);

            string src, head;
            sut.GetDump(font, "1", out src, out head, new WinFormsTextRendererAdapter());

            //Assert.AreEqual("#include \"peg.hpp\"\nROMDATA WORD AutoGenerated__offset_table[2] = {\n0x0, 0x7, };\nROMDATA UCHAR AutoGenerated__data_table[] = {\n0x20, \n0xE0, \n0x20, \n0x20, \n0x20, \n0x20, \n0x20, \n0x20, \n0xF8, \n\n};\n\nPegFont AutoGenerated_ = {1, 9, 0, 9, 1, 0, 0, \n(WORD*)AutoGenerated__offset_table, NULL,\n(UCHAR *) AutoGenerated__data_table};\n", src);
            //Assert.AreEqual("// '1' (7 pixels wide)//\n//   #     \n// ###     \n//   #     \n//   #     \n//   #     \n//   #     \n//   #     \n//   #     \n// #####   \n", head);
        }
    }
}
