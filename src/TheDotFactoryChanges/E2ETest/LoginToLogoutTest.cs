using System;
using System.Threading.Tasks;

using NUnit.Allure.Core;
using NUnit.Framework;

using Service;
using DataAccessInterface;
using DataAccessSQLServer;
using AuthService;

namespace E2ETest
{
    [AllureNUnit]
    public class Tests
    {
        [Test]
        public async Task LoginToLogoutTest()
        {
            Common.CreateTestDatabase("the_dotfactory_test", "127.0.0.1");
            var snapshotName = "testdb";
            var snapshotPath = $@"/var/opt/mssql/data/{snapshotName}.ss";
            Common.CreateDatabaseSnapshot("the_dotfactory_test", "127.0.0.1", snapshotName, snapshotPath);
            var contextFactory = new DbContextFactory();
            var repoFactory = new RepositoryFactory(contextFactory, "127.0.0.1", "the_dotfactory_test", "SA", "P@ssword", false);
            var textRenderer = new WinFormsTextRendererAdapter();
            var authService = new AuthService.AuthService(repoFactory);
            var cvtService = new ConverterService(repoFactory, textRenderer);

            var userId = await authService.RegistrateUser("user_001", "password", "password");

            var userRepo = repoFactory.CreateUserRepository();
            var user = await userRepo.GetUserById(userId);
            userRepo.Dispose();
            Assert.NotNull(user);
            Assert.AreEqual(user.Loggined, false);
            Assert.AreEqual(user.Login, "user_001");
            Assert.AreEqual(user.Name, "default");
            Assert.AreEqual(user.Password, "password");

            await authService.LoginUser("user_001", "password");

            userRepo = repoFactory.CreateUserRepository();
            user = await userRepo.GetUserById(userId);
            userRepo.Dispose();
            Assert.NotNull(user);
            Assert.AreEqual(user.Loggined, true);
            Assert.AreEqual(user.Login, "user_001");
            Assert.AreEqual(user.Name, "default");
            Assert.AreEqual(user.Password, "password");

            var fontId = await cvtService.AddFont(new DataAccessInterface.Font
            {
                Name = "Arial",
                Size = 10,
            });
            var fontRepo = repoFactory.CreateFontRepository();
            var font = await fontRepo.GetFontById(fontId);
            fontRepo.Dispose();
            Assert.NotNull(font);
            Assert.AreEqual(font.Name, "Arial");
            Assert.AreEqual(font.Size, 10);

            cvtService.SetInputText("1");
            await cvtService.SetCurrentFont(fontId);
            var cfgId = await cvtService.CreateConfig(new DataAccessInterface.Configuration());
            await cvtService.SetCurrentConfig(cfgId);
            await cvtService.ConvertFont(true);
            var sourceText = cvtService.GetOutputSourceText();
            var headerText = cvtService.GetOutputHeaderText();
            Assert.AreEqual(sourceText, "#include \"peg.hpp\"\nROMDATA WORD AutoGenerated__offset_table[2] = {\n0x0, 0x3, };\nROMDATA UCHAR AutoGenerated__data_table[] = {\n0x20, \n0x60, \n0xA0, \n0x20, \n0x20, \n0x20, \n0x20, \n\n};\n\nPegFont AutoGenerated_ = {1, 7, 0, 7, 1, 0, 0, \n(WORD*)AutoGenerated__offset_table, NULL,\n(UCHAR *) AutoGenerated__data_table};\n");
            Assert.AreEqual(headerText, "// '1' (3 pixels wide)//\n//   #     \n//  ##     \n// # #     \n//   #     \n//   #     \n//   #     \n//   #     \n");

            await authService.LogoutUser(userId);

            userRepo = repoFactory.CreateUserRepository();
            user = await userRepo.GetUserById(userId);
            userRepo.Dispose();
            Assert.NotNull(user);
            Assert.AreEqual(user.Loggined, false);
            Assert.AreEqual(user.Login, "user_001");
            Assert.AreEqual(user.Name, "default");
            Assert.AreEqual(user.Password, "password");
            Common.RestoreDatabaseBySnapshot("the_dotfactory_test", "127.0.0.1", snapshotName);
        }
    }
}